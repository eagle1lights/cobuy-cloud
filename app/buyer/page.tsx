'use client'; import { useEffect, useMemo, useState } from 'react'; import { Task, TaskStatus, Privacy } from '@/lib/types'; import { db } from '@/lib/db'; import { ensureSeeded } from '@/lib/seed'; import { formatDueHuman, isOverdue } from '@/lib/date'; import { exportCSV, exportICS, openPrintView } from '@/lib/exports';
export default function BuyerPage(){const [tasks,setTasks]=useState<Task[]>([]); const [filter,setFilter]=useState<'all'|'todo'|'doing'|'done'>('all'); useEffect(()=>{ensureSeeded().then(load)},[]);
 async function load(){setTasks((await db.getAll('tasks')).sort((a,b)=>(a.dueDate||'').localeCompare(b.dueDate||'')));}
 async function addTask(){const t:Task={id:crypto.randomUUID(),title:'New task',assignee:'Me',dueDate:new Date(Date.now()+86400000).toISOString(),status:'todo',privacy:'shared',note:''}; await db.add('tasks',t); load();}
 async function updateTask(t:Task){await db.put('tasks',t); load();} async function markDone(id:string){const t=tasks.find(x=>x.id===id); if(!t) return; t.status='done'; await db.put('tasks',t); load();}
 const dueSoon=useMemo(()=>tasks.filter(t=>t.dueDate && !isOverdue(t) && t.status!=='done' && Math.ceil((new Date(t.dueDate).getTime()-Date.now())/86400000)<=3).length,[tasks]);
 const overdue=useMemo(()=>tasks.filter(t=>isOverdue(t) && t.status!=='done').length,[tasks]); const progress=useMemo(()=>Math.round((tasks.filter(t=>t.status==='done').length/Math.max(1,tasks.length))*100),[tasks]);
 const visible=tasks.filter(t=>filter==='all'?true:t.status===filter);
 return(<div className='grid gap-6'><div className='card'><div className='flex items-center justify-between'><div className='flex items-center gap-3'><button className='btn' onClick={addTask}>Add task</button><div className='badge'>{progress}% done</div><div className='badge'>Due soon: {dueSoon}</div><div className='badge'>Overdue: {overdue}</div></div><div className='flex items-center gap-2'><button className='btn' onClick={()=>exportCSV(tasks)}>CSV</button><button className='btn' onClick={()=>exportICS(tasks)}>.ics</button><button className='btn' onClick={()=>openPrintView(tasks)}>PDF</button></div></div></div><div className='card'><div className='flex gap-2'>{(['all','todo','doing','done'] as const).map(f=>(<button key={f} className={`btn ${filter===f?'border border-slate-500':''}`} onClick={()=>setFilter(f)}>{f}</button>))}</div><table className='w-full text-sm mt-4'><thead><tr><th>Title</th><th>Assignee</th><th>Due</th><th>Status</th><th>Privacy</th><th>Note</th><th></th></tr></thead><tbody>{visible.map(t=>(<tr key={t.id}><td><input className='input' value={t.title} onChange={e=>updateTask({...t,title:e.target.value})}/></td><td><input className='input' value={t.assignee||''} onChange={e=>updateTask({...t,assignee:e.target.value})}/></td><td><input className='input' type='date' value={t.dueDate?new Date(t.dueDate).toISOString().slice(0,10):''} onChange={e=>updateTask({...t,dueDate:e.target.value?new Date(e.target.value).toISOString():undefined})}/><div className={`text-xs ${isOverdue(t)?'text-red-400':'text-slate-400'}`}>{formatDueHuman(t)}</div></td><td><select className='input' value={t.status} onChange={e=>updateTask({...t,status:e.target.value as TaskStatus})}><option value='todo'>todo</option><option value='doing'>doing</option><option value='done'>done</option></select></td><td><select className='input' value={t.privacy} onChange={e=>updateTask({...t,privacy:e.target.value as Privacy})}><option value='private'>private</option><option value='shared'>shared</option></select></td><td><input className='input' value={t.note||''} onChange={e=>updateTask({...t,note:e.target.value})}/></td><td>{t.status!=='done' && <button className='btn' onClick={()=>markDone(t.id)}>Done</button>}</td></tr>))}</tbody></table></div></div>);}
